package com.company.taskmanagement.service;

import com.company.taskmanagement.model.ProjectTask;
import com.company.taskmanagement.model.User;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class TelegramGroupNotificationService {

    @Value("${telegram.bot.token:}")
    private String botToken;

    @Value("${telegram.bot.group-id:}")
    private String groupChatId;

    private final RestTemplate restTemplate = new RestTemplate();

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –≤ –≥—Ä—É–ø–ø—É
     */
    public boolean sendTaskNotification(ProjectTask task) {
        if (botToken == null || botToken.isEmpty() || groupChatId == null || groupChatId.isEmpty()) {
            System.out.println("‚ùå Telegram bot token or group chat ID not configured");
            return false;
        }

        String message = buildTaskMessage(task);
        return sendGroupMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public boolean sendGroupMessage(String text) {
        if (botToken == null || botToken.isEmpty() || groupChatId == null || groupChatId.isEmpty()) {
            System.out.println("‚ùå Telegram bot token or group chat ID not configured");
            return false;
        }

        String url = "https://api.telegram.org/bot" + botToken + "/sendMessage";

        Map<String, Object> request = new HashMap<>();
        request.put("chat_id", groupChatId);
        request.put("text", text);
        request.put("parse_mode", "HTML");

        try {
            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
            boolean success = response.getStatusCode().is2xxSuccessful();

            if (success) {
                System.out.println("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É: " + groupChatId);
            } else {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: " + response.getBody());
            }
            return success;
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: " + e.getMessage());
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
     */
    public boolean sendTaskCompletedNotification(ProjectTask task) {
        String message = "‚úÖ <b>–ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n" +
                "üìù " + escapeHtml(task.getTitle()) + "\n" +
                "üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: " + task.getAssignees().stream()
                .map(User::getUsername)
                .collect(Collectors.joining(", ")) + "\n\n" +
                "üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!";

        return sendGroupMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
     */
    public boolean sendTaskUpdatedNotification(ProjectTask task) {
        String message = "‚úèÔ∏è <b>–ó–ê–î–ê–ß–ê –û–ë–ù–û–í–õ–ï–ù–ê</b>\n\n" +
                "üìù " + escapeHtml(task.getTitle()) + "\n" +
                getStatusIcon(task.getStatus()) + " –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: " + getStatusDisplay(task.getStatus()) + "\n\n" +
                "üîó <a href=\"" + getTaskUrl(task.getId()) + "\">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</a>";

        return sendGroupMessage(message);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
     */
    private String buildTaskMessage(ProjectTask task) {
        String assignees = task.getAssignees().stream()
                .map(user -> "üë§ " + escapeHtml(user.getUsername()))
                .collect(Collectors.joining("\n"));

        String statusIcon = getStatusIcon(task.getStatus());
        String priorityIcon = getPriorityIcon(task.getPriority());

        return "üéØ <b>–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê</b>\n\n" +
                "üìù <b>" + escapeHtml(task.getTitle()) + "</b>\n" +
                (task.getDescription() != null && !task.getDescription().isEmpty() ?
                        "üìã " + escapeHtml(truncate(task.getDescription(), 150)) + "\n" : "") +
                statusIcon + " <b>–°—Ç–∞—Ç—É—Å:</b> " + getStatusDisplay(task.getStatus()) + "\n" +
                priorityIcon + " <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> " + getPriorityDisplay(task.getPriority()) + "\n" +
                (task.getDueDate() != null ?
                        "‚è∞ <b>–°—Ä–æ–∫:</b> " + task.getDueDate() + "\n" : "") +
                "\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</b>\n" + assignees + "\n\n" ;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private String escapeHtml(String text) {
        if (text == null) return "";
        return text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\"", "&quot;");
    }

    private String truncate(String text, int length) {
        if (text == null || text.length() <= length) return text;
        return text.substring(0, length) + "...";
    }

    private String getStatusIcon(ProjectTask.TaskStatus status) {
        if (status == null) return "‚ùì";
        switch (status) {
            case PENDING: return "‚è≥";
            case IN_PROGRESS: return "üöß";
            case COMPLETED: return "‚úÖ";
            case CANCELLED: return "‚ùå";
            default: return "üìã";
        }
    }

    private String getPriorityIcon(ProjectTask.TaskPriority priority) {
        if (priority == null) return "‚ùì";
        switch (priority) {
            case LOW: return "‚¨áÔ∏è";
            case MEDIUM: return "‚ÜîÔ∏è";
            case HIGH: return "‚¨ÜÔ∏è";
            case URGENT: return "üî•";
            default: return "üéØ";
        }
    }

    private String getStatusDisplay(ProjectTask.TaskStatus status) {
        if (status == null) return "–ù–µ —É–∫–∞–∑–∞–Ω";
        return status.getDisplayName();
    }

    private String getPriorityDisplay(ProjectTask.TaskPriority priority) {
        if (priority == null) return "–ù–µ —É–∫–∞–∑–∞–Ω";
        return priority.getDisplayName();
    }

    private String getTaskUrl(Long taskId) {
        return "http://localhost:8080/tasks/view/" + taskId;
    }

    /**
     * –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞)
     */
    public String getBotToken() {
        return botToken != null && !botToken.isEmpty() ? "–ù–∞—Å—Ç—Ä–æ–µ–Ω" : "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω";
    }
}